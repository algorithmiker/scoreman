use std::num::NonZeroU8;

const NOTE2_STEPS: [(char, bool); 12] = [
    ('C', false),
    ('C', true),
    ('D', false),
    ('D', true),
    ('E', false),
    ('F', false),
    ('F', true),
    ('G', false),
    ('G', true),
    ('A', false),
    ('A', true),
    ('B', false),
];
#[derive(Debug)]
pub struct MuxmlNote2 {
    /// Numeric representation of the frequency.
    ///
    /// step=0 is an octave 0 C,
    /// step=1 is an octave 0 C#,
    /// step=2 is an octave 0 D,
    /// and so on.
    ///
    /// Can represent 20 full octaves which should be plenty.
    pub step: u8,
    pub dead: bool,
}
impl MuxmlNote2 {
    pub fn step_octave_sharp(&self) -> (char, u8, bool) {
        let stepidx = (self.step % 12) as usize;
        let octave = self.step / 12;
        (NOTE2_STEPS[stepidx].0, octave, NOTE2_STEPS[stepidx].1)
    }
}

// TODO: make this panic an error
pub fn get_fretboard_note2(string: char, fret: u8) -> Option<MuxmlNote2> {
    let base = (*STRING_BASE_NOTES.get(string as usize)?)?;
    Some(MuxmlNote2 { step: base.get() + fret, dead: false })
}

/// TODO: benchmark this against a match and a hashmap, a hashmap will be probably faster as it can
/// stay in cache (we need a total of max 16 base notes*1 byte => 16bytes which is less than a
/// cache line
/// Generated by tools/gen_note_lookup.rs
#[rustfmt::skip]
const STRING_BASE_NOTES: [Option<NonZeroU8>;128] = unsafe {[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(NonZeroU8::new(45).unwrap_unchecked()), Some(NonZeroU8::new(59).unwrap_unchecked()), None, Some(NonZeroU8::new(50).unwrap_unchecked()), Some(NonZeroU8::new(40).unwrap_unchecked()), None, Some(NonZeroU8::new(55).unwrap_unchecked()), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(NonZeroU8::new(62).unwrap_unchecked()), Some(NonZeroU8::new(64).unwrap_unchecked()), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]};
